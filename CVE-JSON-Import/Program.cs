using MongoDB.Bson;
using MongoDB.Bson.IO;
using MongoDB.Bson.Serialization;
using MongoDB.Driver;
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Net;
using System.Text;

namespace CVE_JSON_Import
{
    class Program
    {
        private struct Parameters
        {
            public string feed;
            public bool debug;
            public IPAddress dbaddr;
            public int dbport;
            public string dbname;
            public string dbcollection;
        }

        static void Main(string[] args)
        {
            try
            {
                if (args.Length == 0)
                {
                    Show_defaults();
                    Console.Write("Do you want to continue with the default settings? (Y/N)");
                    ConsoleKeyInfo keyInfo = new ConsoleKeyInfo();

                    while (true)
                    {
                        keyInfo = Console.ReadKey();
                        if (keyInfo.KeyChar == 'Y' || keyInfo.KeyChar == 'y')
                        {
                            Console.WriteLine("\n");
                            break;
                        }
                        else if (keyInfo.KeyChar == 'N' || keyInfo.KeyChar == 'n')
                        {
                            Console.WriteLine("\n");
                            Show_Help();
                        }
                        System.Threading.Thread.Sleep(1); // reduce the CPU load
                    }
                }

                Parameters parameters = Parse_args(args);
                string nvd_feed = string.Format(System.Globalization.CultureInfo.InvariantCulture, "https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-{0}.json.zip", parameters.feed);

                string path = AppDomain.CurrentDomain.BaseDirectory;
                string filename = Path.GetFileName(nvd_feed);
                string fullname = Path.Combine(path, filename);

                // Download the feed from the website
                Download_nvd_feed(nvd_feed);

                //Extract the JSON NVD FEED
                string[] files_to_import = Extract_nvd_feed(fullname, ".json");

                // Import the extracted files into the Mongo Database
                foreach (string file in files_to_import)
                {
                    Import_nvd_feed_in_MongoDB(file, parameters);
                }
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine(ex.Message);
                Show_Help();
            }
        }

        /// <summary>
        /// Parses the commandline arguments and returns them in a structure for further use.
        /// If no arguments are passed to the application it will return the default values.
        /// </summary>
        /// <param name="arguments">Commandline arguments</param>
        /// <returns>Structure with the parsed and default values.</returns>
        /// <exception cref="ArgumentException">Throws an argumentexception if something went wrong during parsing.</exception>
        private static Parameters Parse_args(string[] arguments)
        {
            Parameters parameters = new Parameters() { feed = "recent", debug = false, dbaddr = IPAddress.Parse("127.0.0.1"), dbport = 27017, dbname = "nvd", dbcollection = "cves" }; // default values

            string[] options = string.Join(" ", arguments).Split(new string[] { "--" }, StringSplitOptions.RemoveEmptyEntries);
            string[] parts;
            char[] delimiter = new char[] { ' ' };
            foreach (string option in options)
            {
                if (option.ToLower().Contains("feed"))
                {
                    parts = option.Split(delimiter, StringSplitOptions.RemoveEmptyEntries);
                    if (parts.Length == 2)
                    {
                        parameters.feed = parts[1];
                    }
                    else
                    {
                        // show help
                        throw new ArgumentException("Please define a feed. recent (default), modified or a year e.g. 2019");
                    }
                }
                else if (option.ToLower().Contains("debug"))
                {
                    parts = option.Split(delimiter, StringSplitOptions.RemoveEmptyEntries);
                    if (parts.Length == 2)
                    {
                        if (!Boolean.TryParse(parts[1], out parameters.debug))
                        {
                            // something went wrong during conversion to booleaan --> show help
                            throw new ArgumentException("Value for parameter debug could not be converted.\nPlease use the values true or false (default).");
                        }
                    }
                    else
                    {
                        // show help
                        throw new ArgumentException("Missing value for parameter debug.\nPlease use the values true or false (default).");
                    }
                }
                else if (option.ToLower().Contains("dbaddr"))
                {
                    parts = option.Split(delimiter, StringSplitOptions.RemoveEmptyEntries);
                    if (parts.Length == 2)
                    {
                        string[] p = parts[1].Split(new char[] { ':' });
                        if (p.Length == 2)
                        {
                            if (!IPAddress.TryParse(p[0], out parameters.dbaddr))
                            {
                                // something went wrong during conversion to IPAddress --> show help
                                throw new ArgumentException("IP-Address couldn't be converted. Please check the format.");
                            }

                            if (!int.TryParse(p[1], out parameters.dbport))
                            {
                                // something went wrong during conversion to integer --> show help
                                throw new ArgumentException("Port couldn't be converted. Please check if the port is an integer value.");
                            }
                        }
                        else
                        {
                            throw new ArgumentException("Value for parameter dbaddr is not correctly formatted.\nFormat must be <IP>:<Port> e.g. 127.0.0.1:27017");
                        }
                    }
                    else
                    {
                        // show help
                        // format 127.0.0.1:27017 -> <IP>:<Port>
                        throw new ArgumentException("Missing value for parameter: dbaddr\nFormat must be <IP>:<Port>");
                    }
                }
                else if (option.ToLower().Contains("dbname"))
                {
                    parts = option.Split(delimiter, StringSplitOptions.RemoveEmptyEntries);
                    if (parts.Length == 2)
                    {
                        parameters.dbname = parts[1];
                    }
                    else
                    {
                        throw new ArgumentException("Missing value for parameter: dbname");
                        // show help
                    }
                }
                else if (option.ToLower().Contains("dbcollection"))
                {
                    parts = option.Split(delimiter, StringSplitOptions.RemoveEmptyEntries);
                    if (parts.Length == 2)
                    {
                        parameters.dbcollection = parts[1];
                    }
                    else
                    {
                        // show help
                        throw new ArgumentException("Missing value for parameter: dbcollection.");
                    }
                }
                else if (option.ToLower().Contains("help"))
                {
                    Show_Help();
                }
                else if (option.ToLower().Contains("version"))
                {
                    Show_version();
                }
                else
                {
                    // show help
                    throw new ArgumentException("Unknown parameter!");
                }
            }
            return parameters;
        }

        /// <summary>
        /// Print the help 
        /// </summary>
        private static void Show_Help()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("Download and process NVD feeds\n");
            builder.Append("==============================\n");
            builder.Append("Available commandline options:\n");
            builder.Append("\t--feed <feedname> : recent (default), modified or a year e.g. 2019\n");
            builder.Append("\t--debug <value> : True or False (default)\n");
            builder.Append("\t--dbaddr <value> : Value must be formatted like this <IP>:<Port> Default: 127.0.0.1:27017\n");
            builder.Append("\t--dbname <value> : The name of your database. Default: nvd\n");
            builder.Append("\t--dbcollection <value> : The name of your dbcollection. Default: cves\n");
            builder.Append("\t--help : Show this.\n");
            builder.Append("\t--version : Displays the version of the application.\n");

            Console.WriteLine(builder.ToString());
            Environment.Exit(0);
        }

        /// <summary>
        /// Displays the current software version.
        /// </summary>
        private static void Show_version()
        {
            var version = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version;

            Console.WriteLine("Version : {0}", version.ToString());
            Environment.Exit(0);
        }

        private static void Show_defaults()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("Default settings\n");
            builder.Append("==============================\n");
            builder.Append("  Feed: recent\n");
            builder.Append("  DB addr: 127.0.0.1:27017\n");
            builder.Append("  DB name: nvd\n");
            builder.Append("  DB collection: cves\n\n");

            Console.WriteLine(builder.ToString());
        }

        private static void Download_nvd_feed(string feed)
        {
            try
            {
                string path = AppDomain.CurrentDomain.BaseDirectory;
                string filename = Path.GetFileName(feed);
                string fullname = Path.Combine(path, filename);

                // https://docs.microsoft.com/en-us/dotnet/api/system.net.servicepointmanager.securityprotocol?redirectedfrom=MSDN&view=netframework-4.8#System_Net_ServicePointManager_SecurityProtocol
                using (WebClient client = new WebClient())
                {
                    //System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    Console.WriteLine("Downloading: {0}", filename);
                    client.Headers.Add("user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36");
                    client.UseDefaultCredentials = true;

                    client.DownloadFile(feed, fullname);
                }
            }
            catch (Exception)
            {
                throw;
            }

        }

        /// <summary>
        /// Extract the downloaded ZIP-File
        /// </summary>
        /// <param name="filename">Local ZIP-File</param>
        /// <param name="extension">Fileextension of the files that must be extracted e.g. .json</param>
        /// <returns>list of extracted files with the full path.</returns>
        private static string[] Extract_nvd_feed(string filename, string extension)
        {
            string extractPath = AppDomain.CurrentDomain.BaseDirectory;
            List<string> files = new List<string>();

            try
            {
                using (ZipArchive archive = ZipFile.OpenRead(filename))
                {
                    foreach (ZipArchiveEntry entry in archive.Entries)
                    {
                        if (entry.FullName.EndsWith(extension, StringComparison.OrdinalIgnoreCase))
                        {
                            string destinationPath = Path.GetFullPath(Path.Combine(extractPath, entry.FullName));
                            if (destinationPath.StartsWith(extractPath, StringComparison.Ordinal))
                            {
                                entry.ExtractToFile(destinationPath, true); // Existing files will be overwritten
                                Console.WriteLine("Extracting: {0}", entry.FullName);
                                files.Add(destinationPath);
                            }
                        }
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }

            return files.ToArray();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="filename">NVD JSON File</param>
        /// <param name="parameters"></param>
        private static void Import_nvd_feed_in_MongoDB(string filename, Parameters parameters)
        {
            try
            {
                var client = new MongoClient(string.Format(System.Globalization.CultureInfo.InvariantCulture, "mongodb://{0}:{1}", parameters.dbaddr.ToString(), parameters.dbport.ToString()));
                var database = client.GetDatabase(parameters.dbname);
                IMongoCollection<BsonDocument> collection = database.GetCollection<BsonDocument>(parameters.dbcollection); // initialize to the collection to write to.

                string content = File.ReadAllText(filename); // Read the whole JSON-File

                // Import the JSON-File into the Database
                using (var jsonReader = new JsonReader(content))
                {
                    var context = BsonDeserializationContext.CreateRoot(jsonReader);
                    var document = collection.DocumentSerializer.Deserialize(context);
                    var items = document["CVE_Items"];

                    // The max. size for a BSON Document ist 16MB, so really large files can't be imported at once
                    FilterDefinition<BsonDocument> filter = "{ '_id': cve['_id'] }";
                    UpdateDefinition<BsonDocument> update = "{ '$set': cve }";
                    string bsonvalue = string.Empty;
                    string toParse = string.Empty;
                    UpdateResult updateResult;

                    Console.WriteLine("Importing data into database mongodb://{0}:{1}", parameters.dbaddr.ToString(), parameters.dbport.ToString());

                    foreach (BsonDocument doc in items.AsBsonArray)
                    {
                        var id = doc["cve"]["CVE_data_meta"]["ID"];

                        filter = string.Format("{0} '_id': \"{1}\" {2}", "{", id, "}"); // Query string
                        update = string.Format("{0} '$set': {1} {2}", "{", doc.AsBsonValue, "}"); // Update data

                        updateResult = collection.UpdateOne(filter, update);
                        if (updateResult.IsAcknowledged && (updateResult.ModifiedCount == 0 && updateResult.MatchedCount == 0))
                        {
                            bsonvalue = doc.AsBsonValue.ToString();
                            bsonvalue = bsonvalue.Remove(0, 1);
                            bsonvalue = bsonvalue.Remove(bsonvalue.Length - 1, 1);

                            toParse = string.Format("{0} '_id': \"{1}\", {2} {3}", "{", id, bsonvalue, "}");
                            //BsonDocument doc2 = BsonDocument.Parse(toParse);

                            collection.InsertOne(BsonDocument.Parse(toParse)); // Entry doesn't exist in DB so we have to add it.
                        }
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
    }
}
